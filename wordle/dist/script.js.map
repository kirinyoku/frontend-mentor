{"version":3,"sources":["script.js"],"names":["currentGuessCount","tileNumber","currentGuess","document","querySelector","concat","guessTiles","querySelectorAll","keyboardKeys","result","helpButton","refreshButton","helpMenu","helpMenuClose","helpGuessTiles","controller","AbortController","signal","letterPattern","words","guessWord","data","randomItem","Math","floor","random","length","localStorage","setItem","getSolution","fetch","then","res","json","getWords","addAnimDelay","i","delay","tileWrapperList","j","style","animationDelay","addAnimation","element","animName","dataset","animation","getKey","letter","typeLetter","currentTile","textContent","ariaLabel","letters","eraseLetter","slice","checkLetters","getItem","state","includes","parentElement","checkGuess","guess","abort","clear","addGuessToData","addGuessToStorage","submitGuess","setTimeout","openHelp","display","ariaHidden","open","closeHelp","refreshGame","location","reload","window","addEventListener","_localStorage$getItem","split","join","e","target","key","test","toLocaleLowerCase","dataKey","currentTarget"],"mappings":"AAAA,aACA,IAAIA,kBAAoB,EAEpBC,WAAa,EAEbC,aAAeC,SAASC,cAAT,SAAAC,OAAgCL,oBAE/CM,WAAaH,SAASI,iBAAT,SAAAF,OAAmCL,kBAAnC,kBAEXQ,aAAeL,SAASI,iBAAiB,kBAEzCE,OAASN,SAASC,cAAc,iBAEhCM,WAAaP,SAASC,cAAc,gBACpCO,cAAgBR,SAASC,cAAc,mBAEvCQ,SAAWT,SAASC,cAAc,SAClCS,cAAgBV,SAASC,cAAc,uBACvCU,eAAiBX,SAASI,iBAAiB,4CAE3CQ,WAAa,IAAIC,gBACfC,OAAWF,WAAXE,OAEFC,cAAgB,yBAGlBC,MAAQ,GAENC,UAAY,SAACC,GAClB,IAAMC,EAAaC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAKK,OAAS,IAAM,EACnEC,aAAaC,QAAQ,WAAYP,EAAKC,KAGjCO,YAAc,WACnBC,MAAM,iBACLC,MAAK,SAASC,GACd,OAAOA,EAAIC,UAEXF,MAAK,SAASV,GACdD,UAAUC,OAINa,SAAW,WAChBJ,MAAM,iBACLC,MAAK,SAASC,GACd,OAAOA,EAAIC,UAEXF,MAAK,SAASV,GACdF,MAAQE,MAKJc,aAAe,WACpB,IAAK,IAAIC,EAAI,EAAGA,GAAK,EAAGA,IAGvB,IAFA,IAAIC,EAAQ,EACNC,EAAkBnC,SAASI,iBAAT,SAAAF,OAAmC+B,EAAnC,WACfG,EAAI,EAAGA,EAAID,EAAgBZ,OAAQa,IAC3CD,EAAgBC,GAAGC,MAAMC,eAAzB,GAAApC,OAA6CgC,EAA7C,MACAA,GAAS,KAKNK,aAAe,SAACC,EAASC,GAC9BD,EAAQE,QAAQC,UAAYF,GAGvBG,OAAS,SAACC,GACf,OAAO7C,SAASC,cAAT,2BAAAC,OAAkD2C,EAAlD,OAGFC,WAAa,SAACD,GAClB,GAAI/C,YAAc,EAAG,CACrB,IAAIiD,EAAc5C,WAAWL,YAC3ByC,aAAaQ,EAAa,OAC1BA,EAAYC,YAAcH,EAC5BE,EAAYE,UAAYJ,EACtB9C,aAAa2C,QAAQQ,SAAWL,EAChC/C,YAAc,IAIZqD,YAAc,WACnB,GAAIrD,WAAa,EAAG,CAEnB,IAAIiD,EAAc5C,WADlBL,YAAc,GAEdiD,EAAYC,YAAc,GAC1BD,EAAYE,UAAY,QACxBF,EAAYL,QAAQC,UAAY,OAChC5C,aAAa2C,QAAQQ,QAAUnD,aAAa2C,QAAQQ,QAAQE,MAAM,GAAI,KAIlEC,aAAe,WACpB,IAAK,IAAIpB,EAAI,EAAGA,EAAI9B,WAAWoB,OAAQU,IAAK,CAC3C,IAAIY,EAAS1C,WAAW8B,GAAGe,YACvBH,IAAWrB,aAAa8B,QAAQ,YAAYrB,IAC/C9B,WAAW8B,GAAGS,QAAQa,MAAQ,UAC9BX,OAAOC,GAAQH,QAAQa,MAAQ,WACrB/B,aAAa8B,QAAQ,YAAYE,SAASX,IACpD1C,WAAW8B,GAAGS,QAAQa,MAAQ,UAC9BX,OAAOC,GAAQH,QAAQa,MAAQ,YAE/BpD,WAAW8B,GAAGS,QAAQa,MAAQ,SAC9BX,OAAOC,GAAQH,QAAQa,MAAQ,UAEhChB,aAAapC,WAAW8B,GAAGwB,cAAe,QAC1ClB,aAAapC,WAAW8B,GAAI,UAIxByB,WAAa,WACd3D,aAAa2C,QAAQiB,QAAUnC,aAAa8B,QAAQ,aACvD1C,WAAWgD,QACXpC,aAAaqC,QACbvD,OAAO0C,YAAc,4BACW,IAAtBnD,mBACVe,WAAWgD,QACXtD,OAAO0C,YAAcxB,aAAa8B,QAAQ,YAC1C9B,aAAaqC,UAEb/D,WAAa,EACbD,mBAAqB,EACrBE,aAAeC,SAASC,cAAT,SAAAC,OAAgCL,oBAC/CM,WAAaH,SAASI,iBAAT,SAAAF,OAAmCL,kBAAnC,kBACbS,OAAO0C,YAAc,KAIjBc,eAAiB,WACtB/D,aAAa2C,QAAQiB,MAAQ5D,aAAa2C,QAAQQ,SAG7Ca,kBAAoB,WACzBvC,aAAaC,QAAQ,QAAS,CAACD,aAAa8B,QAAQ,SAAUvD,aAAa2C,QAAQiB,SAG9EK,YAAc,WACfhD,MAAMwC,SAASzD,aAAa2C,QAAQQ,UACvCG,eACAS,iBACAC,oBACAL,eAEAnB,aAAaxC,aAAc,SAC3BO,OAAO0C,YAAc,eACrBiB,YAAW,WACV1B,aAAaxC,aAAc,QAC3BO,OAAO0C,YAAc,KACnB,OAICkB,SAAW,WAChBzD,SAAS4B,MAAM8B,QAAU,OACzB1D,SAAS2D,WAAa,QACtB3D,SAAS4D,MAAO,EAChB,IAAK,IAAIpC,EAAI,EAAGA,EAAItB,eAAeY,OAAQU,IAC1CM,aAAa5B,eAAesB,GAAI,SAI5BqC,UAAY,WACjB7D,SAAS4B,MAAM8B,QAAU,OACzB1D,SAAS2D,WAAa,OACtB3D,SAAS4D,MAAO,EAChB,IAAK,IAAIpC,EAAI,EAAGA,EAAItB,eAAeY,OAAQU,IAC1CM,aAAa5B,eAAesB,GAAI,SAI5BsC,YAAc,WACnB/C,aAAaqC,QACbW,SAASC,UAGVC,OAAOC,iBAAiB,QAAQ,WAAM,IAAAC,EAMrC,GALKpD,aAAa8B,QAAQ,aACzB5B,cAEDK,WACAC,gBACI,QAAA4C,EAAApD,aAAa8B,QAAQ,gBAArB,IAAAsB,OAAA,EAAAA,EAA+BrD,QAAS,EAC3C,IAAK,IAAIU,EAAI,EAAGA,GAAKT,aAAa8B,QAAQ,SAASuB,MAAM,KAAKC,KAAK,IAAIvD,OAAQU,IAC9Ea,WAAWtB,aAAa8B,QAAQ,SAASuB,MAAM,KAAKC,KAAK,IAAI7C,EAAE,IACrD,IAANA,GAAWA,EAAI,GAAM,IACxBoB,eACAtD,aAAa2C,QAAQiB,MAAQ5D,aAAa2C,QAAQQ,QAClDQ,cAIHlD,cAAcmE,iBAAiB,SAAS,WACvCJ,iBAEDhE,WAAWoE,iBAAiB,SAAS,WACpCT,cAEDzD,SAASkE,iBAAiB,SAAS,SAACI,GAC/BA,EAAEC,SAAWvE,UAAYsE,EAAEC,SAAWtE,eACzC4D,kBAKHtE,SAAS2E,iBAAiB,WAAW,SAACI,GAChB,IAAjBA,EAAEE,IAAI1D,QAAgBR,cAAcmE,KAAKH,EAAEE,KAC9CnC,WAAWiC,EAAEE,IAAIE,qBACG,cAAVJ,EAAEE,IACZ9B,cACoB,UAAV4B,EAAEE,KAAkC,IAAfnF,YAAoBD,mBAAqB,GACxEmE,gBAEC,CAAElD,OAAAA,SAEL,IAAK,IAAImB,EAAI,EAAGA,EAAI5B,aAAakB,OAAQU,IACxC5B,aAAa4B,GAAG0C,iBAAiB,SAAS,SAACI,GAC1C,IAAIK,EAAUL,EAAEM,cAAc3C,QAAQuC,IACf,IAAnBG,EAAQ7D,QAAgBR,cAAcmE,KAAKE,GAC9CtC,WAAWsC,GACW,cAAZA,EACVjC,cACsB,UAAZiC,GAAsC,IAAftF,YAAoBD,mBAAqB,GAC1EmE","file":"script.js","sourcesContent":["// guess counter\r\nlet currentGuessCount = 1;\r\n// tile counter\r\nlet tileNumber = 0;\r\n// current row of guess\r\nlet currentGuess = document.querySelector(`#guess${currentGuessCount}`);\r\n// array of tiles in the current row of guess\r\nlet guessTiles = document.querySelectorAll(`#guess${currentGuessCount} .guess__tile`);\r\n// array of keyboard keys\r\nconst keyboardKeys = document.querySelectorAll('.keyboard__key');\r\n// element for display result\r\nconst result = document.querySelector('.result__info');\r\n// header navigation buttons\r\nconst helpButton = document.querySelector('#help-button');\r\nconst refreshButton = document.querySelector('#refresh-button');\r\n// help menu \r\nconst helpMenu = document.querySelector('#help');\r\nconst helpMenuClose = document.querySelector('.modal__close > img');\r\nconst helpGuessTiles = document.querySelectorAll('.modal__example .guess__tile[data-state]');\r\n// controller for event listener \r\nconst controller = new AbortController();\r\nconst { signal } = controller;\r\n// regular expression to test a string for a letter\r\nconst letterPattern = /^[A-Za-z][A-Za-z0-9]*$/;\r\n\r\n// list of words for guess\r\nlet words = [];\r\n\r\nconst guessWord = (data) => {\r\n\tconst randomItem = Math.floor(Math.random() * (data.length - 1)) + 1;\r\n\tlocalStorage.setItem('solution', data[randomItem]);\r\n}\r\n\r\nconst getSolution = () => {\r\n\tfetch('../words.json')\r\n\t.then(function(res) {\r\n\t\treturn res.json();\r\n\t})\r\n\t.then(function(data) {\r\n\t\tguessWord(data);\r\n\t})\r\n}\r\n\r\nconst getWords = () => {\r\n\tfetch('../words.json')\r\n\t.then(function(res) {\r\n\t\treturn res.json();\r\n\t})\r\n\t.then(function(data) {\r\n\t\twords = data;\r\n\t})\r\n} \r\n\r\n// adding animation-delay to the tile wrappers (to animate the flipping of tiles)\r\nconst addAnimDelay = () => {\r\n\tfor (let i = 1; i <= 6; i++) {\r\n\t\tlet delay = 0;\r\n\t\tconst tileWrapperList = document.querySelectorAll(`#guess${i} > div`);\r\n\t\tfor (let j = 0; j < tileWrapperList.length; j++){\r\n\t\t\ttileWrapperList[j].style.animationDelay = `${delay}ms`;\r\n\t\t\tdelay += 150;\r\n\t\t};\r\n\t};\r\n};\r\n\r\nconst addAnimation = (element, animName) => {\r\n\telement.dataset.animation = animName;\r\n};\r\n\r\nconst getKey = (letter) => {\r\n\treturn document.querySelector(`.keyboard__key[data-key=${letter}]`);\r\n}\r\n\r\nconst typeLetter = (letter) => {\r\n  if (tileNumber <= 4) {\r\n\t\tlet currentTile = guessTiles[tileNumber];\r\n    addAnimation(currentTile, 'pop');\r\n    currentTile.textContent = letter;\r\n\t\tcurrentTile.ariaLabel = letter;\r\n    currentGuess.dataset.letters += letter;\r\n    tileNumber += 1;\r\n  };\r\n};\r\n\r\nconst eraseLetter = () => {\r\n\tif (tileNumber > 0) {\r\n\t\ttileNumber -= 1;\r\n\t\tlet currentTile = guessTiles[tileNumber];\r\n\t\tcurrentTile.textContent = '';\r\n\t\tcurrentTile.ariaLabel = 'empty';\r\n\t\tcurrentTile.dataset.animation = 'idle';\r\n\t\tcurrentGuess.dataset.letters = currentGuess.dataset.letters.slice(0, -1);\r\n\t};\r\n};\r\n\r\nconst checkLetters = () => {\r\n\tfor (let i = 0; i < guessTiles.length; i++) {\r\n\t\tlet letter = guessTiles[i].textContent;\r\n\t\tif (letter === localStorage.getItem('solution')[i]) {\r\n\t\t\tguessTiles[i].dataset.state = 'correct';\r\n\t\t\tgetKey(letter).dataset.state = 'correct';\r\n\t\t} else if (localStorage.getItem('solution').includes(letter)) {\r\n\t\t\tguessTiles[i].dataset.state = 'present';\r\n\t\t\tgetKey(letter).dataset.state = 'present';\r\n\t\t} else {\r\n\t\t\tguessTiles[i].dataset.state = 'absent';\r\n\t\t\tgetKey(letter).dataset.state = 'absent';\r\n\t\t};\r\n\t\taddAnimation(guessTiles[i].parentElement, 'flip');\r\n\t\taddAnimation(guessTiles[i], 'idle');\r\n\t};\r\n};\r\n\r\nconst checkGuess = () => {\r\n\tif (currentGuess.dataset.guess === localStorage.getItem('solution')) {\r\n\t\tcontroller.abort();\r\n\t\tlocalStorage.clear();\r\n\t\tresult.textContent = 'You guessed the word! ðŸ¥³';\r\n\t} else if (currentGuessCount === 6) {\r\n\t\tcontroller.abort();\r\n\t\tresult.textContent = localStorage.getItem('solution');\r\n\t\tlocalStorage.clear();\r\n\t} else {\r\n\t\ttileNumber = 0;\r\n\t\tcurrentGuessCount += 1;\r\n\t\tcurrentGuess = document.querySelector(`#guess${currentGuessCount}`);\r\n\t\tguessTiles = document.querySelectorAll(`#guess${currentGuessCount} .guess__tile`);\r\n\t\tresult.textContent = '';\r\n\t};\r\n}\r\n\r\nconst addGuessToData = () => {\r\n\tcurrentGuess.dataset.guess = currentGuess.dataset.letters;\r\n}\r\n\r\nconst addGuessToStorage = () => {\r\n\tlocalStorage.setItem('guess', [localStorage.getItem('guess'), currentGuess.dataset.guess]);\r\n}\r\n\r\nconst submitGuess = () => {\r\n\tif (words.includes(currentGuess.dataset.letters)) {\r\n\t\tcheckLetters();\r\n\t\taddGuessToData();\r\n\t\taddGuessToStorage();\r\n\t\tcheckGuess();\r\n\t} else {\r\n\t\taddAnimation(currentGuess, 'shake');\r\n\t\tresult.textContent = 'isn\\'t a word';\r\n\t\tsetTimeout(() => {\r\n\t\t\taddAnimation(currentGuess, 'idle');\r\n\t\t\tresult.textContent = '';\r\n\t\t}, 600)\r\n\t}\r\n};\r\n\r\nconst openHelp = () => {\r\n\thelpMenu.style.display = 'flex';\r\n\thelpMenu.ariaHidden = 'false';\r\n\thelpMenu.open = true;\r\n\tfor (let i = 0; i < helpGuessTiles.length; i++) {\r\n\t\taddAnimation(helpGuessTiles[i], 'flip');\r\n\t}\r\n}\r\n\r\nconst closeHelp = () => {\r\n\thelpMenu.style.display = 'none';\r\n\thelpMenu.ariaHidden = 'true';\r\n\thelpMenu.open = false;\r\n\tfor (let i = 0; i < helpGuessTiles.length; i++) {\r\n\t\taddAnimation(helpGuessTiles[i], 'idle');\r\n\t}\r\n}\r\n\r\nconst refreshGame = () => {\r\n\tlocalStorage.clear();\r\n\tlocation.reload();\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n\tif (!localStorage.getItem(\"solution\")) {\r\n\t\tgetSolution();\r\n\t}\r\n\tgetWords();\r\n\taddAnimDelay();\r\n\tif (localStorage.getItem(\"guess\")?.length > 0) {\r\n\t\tfor (let i = 1; i <= localStorage.getItem(\"guess\").split(',').join('').length; i++){\r\n\t\t\ttypeLetter(localStorage.getItem(\"guess\").split(',').join('')[i-1]);\r\n\t\t\tif (i !== 0 && i % 5 === 0) {\r\n\t\t\t\tcheckLetters();\r\n\t\t\t\tcurrentGuess.dataset.guess = currentGuess.dataset.letters;\r\n\t\t\t\tcheckGuess();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\trefreshButton.addEventListener('click', () => {\r\n\t\trefreshGame();\r\n\t})\r\n\thelpButton.addEventListener('click', () => {\r\n\t\topenHelp();\r\n\t})\r\n\thelpMenu.addEventListener('click', (e) => {\r\n\t\tif (e.target === helpMenu || e.target === helpMenuClose) {\r\n\t\t\tcloseHelp();\r\n\t\t}\r\n\t})\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n\tif (e.key.length === 1 && letterPattern.test(e.key)) {\r\n\t\ttypeLetter(e.key.toLocaleLowerCase());\r\n\t} else if (e.key === 'Backspace') {\r\n\t\teraseLetter();\r\n\t} else if (e.key === 'Enter' && tileNumber === 5 && currentGuessCount <= 6) {\r\n\t\tsubmitGuess();\r\n\t};\r\n}, { signal });\r\n\r\nfor (let i = 0; i < keyboardKeys.length; i++) {\r\n\tkeyboardKeys[i].addEventListener('click', (e) => {\r\n\t\tlet dataKey = e.currentTarget.dataset.key;\r\n\t\tif (dataKey.length === 1 && letterPattern.test(dataKey)) {\r\n\t\t\ttypeLetter(dataKey);\r\n\t\t} else if (dataKey === 'Backspace') {\r\n\t\t\teraseLetter();\r\n\t\t} else if (dataKey === 'Enter' && tileNumber === 5 && currentGuessCount <= 6) {\r\n\t\t\tsubmitGuess();\r\n\t\t};\r\n\t});\r\n}\r\n"]}