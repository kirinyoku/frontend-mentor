{"version":3,"sources":["script.js"],"names":["currentGuessCount","tileNumber","currentGuess","document","querySelector","concat","guessTiles","querySelectorAll","keyboardKeys","result","helpButton","refreshButton","controller","AbortController","signal","letterPattern","words","guessWord","data","randomItem","Math","floor","random","length","localStorage","setItem","getSolution","fetch","then","res","json","getWords","addAnimDelay","i","delay","tileWrapperList","j","style","animationDelay","addAnimation","element","animName","dataset","animation","getKey","letter","typeLetter","currentTile","textContent","letters","eraseLetter","slice","checkLetters","getItem","state","includes","parentElement","checkGuess","guess","abort","clear","addGuessToData","addGuessToStorage","submitGuess","setTimeout","window","addEventListener","_localStorage$getItem","split","join","e","key","test","toLocaleLowerCase","dataKey","currentTarget"],"mappings":"AAAA,aACA,IAAIA,kBAAoB,EAEpBC,WAAa,EAEbC,aAAeC,SAASC,cAAT,SAAAC,OAAgCL,oBAE/CM,WAAaH,SAASI,iBAAT,SAAAF,OAAmCL,kBAAnC,kBAEXQ,aAAeL,SAASI,iBAAiB,kBAEzCE,OAASN,SAASC,cAAc,iBAEhCM,WAAaP,SAASC,cAAc,gBACpCO,cAAgBR,SAASC,cAAc,mBAEvCQ,WAAa,IAAIC,gBACfC,OAAWF,WAAXE,OAEFC,cAAgB,yBAGlBC,MAAQ,GAENC,UAAY,SAACC,GAClB,IAAMC,EAAaC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAKK,OAAS,IAAM,EACnEC,aAAaC,QAAQ,WAAYP,EAAKC,KAGjCO,YAAc,WACnBC,MAAM,iBACLC,MAAK,SAASC,GACd,OAAOA,EAAIC,UAEXF,MAAK,SAASV,GACdD,UAAUC,OAINa,SAAW,WAChBJ,MAAM,iBACLC,MAAK,SAASC,GACd,OAAOA,EAAIC,UAEXF,MAAK,SAASV,GACdF,MAAQE,MAKJc,aAAe,WACpB,IAAK,IAAIC,EAAI,EAAGA,GAAK,EAAGA,IAGvB,IAFA,IAAIC,EAAQ,EACNC,EAAkBhC,SAASI,iBAAT,SAAAF,OAAmC4B,EAAnC,WACfG,EAAI,EAAGA,EAAID,EAAgBZ,OAAQa,IAC3CD,EAAgBC,GAAGC,MAAMC,eAAzB,GAAAjC,OAA6C6B,EAA7C,MACAA,GAAS,KAKNK,aAAe,SAACC,EAASC,GAC9BD,EAAQE,QAAQC,UAAYF,GAGvBG,OAAS,SAACC,GACf,OAAO1C,SAASC,cAAT,2BAAAC,OAAkDwC,EAAlD,OAGFC,WAAa,SAACD,GAClB,GAAI5C,YAAc,EAAG,CACrB,IAAI8C,EAAczC,WAAWL,YAC3BsC,aAAaQ,EAAa,OAC1BA,EAAYC,YAAcH,EAC1B3C,aAAawC,QAAQO,SAAWJ,EAChC5C,YAAc,IAIZiD,YAAc,WACnB,GAAIjD,WAAa,EAAG,CAEnB,IAAI8C,EAAczC,WADlBL,YAAc,GAEd8C,EAAYC,YAAc,GAC1BD,EAAYL,QAAQC,UAAY,OAChCzC,aAAawC,QAAQO,QAAU/C,aAAawC,QAAQO,QAAQE,MAAM,GAAI,KAIlEC,aAAe,WACpB,IAAK,IAAInB,EAAI,EAAGA,EAAI3B,WAAWiB,OAAQU,IAAK,CAC3C,IAAIY,EAASvC,WAAW2B,GAAGe,YACvBH,IAAWrB,aAAa6B,QAAQ,YAAYpB,IAC/C3B,WAAW2B,GAAGS,QAAQY,MAAQ,UAC9BV,OAAOC,GAAQH,QAAQY,MAAQ,WACrB9B,aAAa6B,QAAQ,YAAYE,SAASV,IACpDvC,WAAW2B,GAAGS,QAAQY,MAAQ,UAC9BV,OAAOC,GAAQH,QAAQY,MAAQ,YAE/BhD,WAAW2B,GAAGS,QAAQY,MAAQ,SAC9BV,OAAOC,GAAQH,QAAQY,MAAQ,UAEhCf,aAAajC,WAAW2B,GAAGuB,cAAe,QAC1CjB,aAAajC,WAAW2B,GAAI,UAIxBwB,WAAa,WACdvD,aAAawC,QAAQgB,QAAUlC,aAAa6B,QAAQ,aACvDzC,WAAW+C,QACXnC,aAAaoC,QACbnD,OAAOuC,YAAc,4BACW,IAAtBhD,mBACVY,WAAW+C,QACXlD,OAAOuC,YAAcxB,aAAa6B,QAAQ,YAC1C7B,aAAaoC,UAEb3D,WAAa,EACbD,mBAAqB,EACrBE,aAAeC,SAASC,cAAT,SAAAC,OAAgCL,oBAC/CM,WAAaH,SAASI,iBAAT,SAAAF,OAAmCL,kBAAnC,kBACbS,OAAOuC,YAAc,KAIjBa,eAAiB,WACtB3D,aAAawC,QAAQgB,MAAQxD,aAAawC,QAAQO,SAG7Ca,kBAAoB,WACzBtC,aAAaC,QAAQ,QAAS,CAACD,aAAa6B,QAAQ,SAAUnD,aAAawC,QAAQgB,SAG9EK,YAAc,WACf/C,MAAMuC,SAASrD,aAAawC,QAAQO,UACvCG,eACAS,iBACAC,oBACAL,eAEAlB,aAAarC,aAAc,SAC3BO,OAAOuC,YAAc,eACrBgB,YAAW,WACVzB,aAAarC,aAAc,QAC3BO,OAAOuC,YAAc,KACnB,OAILiB,OAAOC,iBAAiB,QAAQ,WAAM,IAAAC,EAMrC,GALK3C,aAAa6B,QAAQ,aACzB3B,cAEDK,WACAC,gBACI,QAAAmC,EAAA3C,aAAa6B,QAAQ,gBAArB,IAAAc,OAAA,EAAAA,EAA+B5C,QAAS,EAC3C,IAAK,IAAIU,EAAI,EAAGA,GAAKT,aAAa6B,QAAQ,SAASe,MAAM,KAAKC,KAAK,IAAI9C,OAAQU,IAC9Ea,WAAWtB,aAAa6B,QAAQ,SAASe,MAAM,KAAKC,KAAK,IAAIpC,EAAE,IACrD,IAANA,GAAWA,EAAI,GAAM,IACxBmB,eACAlD,aAAawC,QAAQgB,MAAQxD,aAAawC,QAAQO,QAClDQ,iBAMJtD,SAAS+D,iBAAiB,WAAW,SAACI,GAChB,IAAjBA,EAAEC,IAAIhD,QAAgBR,cAAcyD,KAAKF,EAAEC,KAC9CzB,WAAWwB,EAAEC,IAAIE,qBACG,cAAVH,EAAEC,IACZrB,cACoB,UAAVoB,EAAEC,KAAkC,IAAftE,YAAoBD,mBAAqB,GACxE+D,gBAEC,CAAEjD,OAAAA,SAEL,IAAK,IAAImB,EAAI,EAAGA,EAAIzB,aAAae,OAAQU,IACxCzB,aAAayB,GAAGiC,iBAAiB,SAAS,SAACI,GAC1C,IAAII,EAAUJ,EAAEK,cAAcjC,QAAQ6B,IACf,IAAnBG,EAAQnD,QAAgBR,cAAcyD,KAAKE,GAC9C5B,WAAW4B,GACW,cAAZA,EACVxB,cACsB,UAAZwB,GAAsC,IAAfzE,YAAoBD,mBAAqB,GAC1E+D","file":"script.js","sourcesContent":["// guess counter\r\nlet currentGuessCount = 1;\r\n// tile counter\r\nlet tileNumber = 0;\r\n// current row of guess\r\nlet currentGuess = document.querySelector(`#guess${currentGuessCount}`);\r\n// array of tiles in the current row of guess\r\nlet guessTiles = document.querySelectorAll(`#guess${currentGuessCount} .guess__tile`);\r\n// array of keyboard keys\r\nconst keyboardKeys = document.querySelectorAll('.keyboard__key');\r\n// element for display result\r\nconst result = document.querySelector('.result__info');\r\n// header navigation buttons\r\nconst helpButton = document.querySelector('#help-button');\r\nconst refreshButton = document.querySelector('#refresh-button');\r\n// controller for event listener \r\nconst controller = new AbortController();\r\nconst { signal } = controller;\r\n// regular expression to test a string for a letter\r\nconst letterPattern = /^[A-Za-z][A-Za-z0-9]*$/;\r\n\r\n// list of words for guess\r\nlet words = [];\r\n\r\nconst guessWord = (data) => {\r\n\tconst randomItem = Math.floor(Math.random() * (data.length - 1)) + 1;\r\n\tlocalStorage.setItem('solution', data[randomItem]);\r\n}\r\n\r\nconst getSolution = () => {\r\n\tfetch('../words.json')\r\n\t.then(function(res) {\r\n\t\treturn res.json();\r\n\t})\r\n\t.then(function(data) {\r\n\t\tguessWord(data);\r\n\t})\r\n}\r\n\r\nconst getWords = () => {\r\n\tfetch('../words.json')\r\n\t.then(function(res) {\r\n\t\treturn res.json();\r\n\t})\r\n\t.then(function(data) {\r\n\t\twords = data;\r\n\t})\r\n} \r\n\r\n// adding animation-delay to the tile wrappers (to animate the flipping of tiles)\r\nconst addAnimDelay = () => {\r\n\tfor (let i = 1; i <= 6; i++) {\r\n\t\tlet delay = 0;\r\n\t\tconst tileWrapperList = document.querySelectorAll(`#guess${i} > div`);\r\n\t\tfor (let j = 0; j < tileWrapperList.length; j++){\r\n\t\t\ttileWrapperList[j].style.animationDelay = `${delay}ms`;\r\n\t\t\tdelay += 150;\r\n\t\t};\r\n\t};\r\n};\r\n\r\nconst addAnimation = (element, animName) => {\r\n\telement.dataset.animation = animName;\r\n};\r\n\r\nconst getKey = (letter) => {\r\n\treturn document.querySelector(`.keyboard__key[data-key=${letter}]`);\r\n}\r\n\r\nconst typeLetter = (letter) => {\r\n  if (tileNumber <= 4) {\r\n\t\tlet currentTile = guessTiles[tileNumber];\r\n    addAnimation(currentTile, 'pop');\r\n    currentTile.textContent = letter;\r\n    currentGuess.dataset.letters += letter;\r\n    tileNumber += 1;\r\n  };\r\n};\r\n\r\nconst eraseLetter = () => {\r\n\tif (tileNumber > 0) {\r\n\t\ttileNumber -= 1;\r\n\t\tlet currentTile = guessTiles[tileNumber];\r\n\t\tcurrentTile.textContent = '';\r\n\t\tcurrentTile.dataset.animation = 'idle';\r\n\t\tcurrentGuess.dataset.letters = currentGuess.dataset.letters.slice(0, -1);\r\n\t};\r\n};\r\n\r\nconst checkLetters = () => {\r\n\tfor (let i = 0; i < guessTiles.length; i++) {\r\n\t\tlet letter = guessTiles[i].textContent;\r\n\t\tif (letter === localStorage.getItem('solution')[i]) {\r\n\t\t\tguessTiles[i].dataset.state = 'correct';\r\n\t\t\tgetKey(letter).dataset.state = 'correct';\r\n\t\t} else if (localStorage.getItem('solution').includes(letter)) {\r\n\t\t\tguessTiles[i].dataset.state = 'present';\r\n\t\t\tgetKey(letter).dataset.state = 'present';\r\n\t\t} else {\r\n\t\t\tguessTiles[i].dataset.state = 'absent';\r\n\t\t\tgetKey(letter).dataset.state = 'absent';\r\n\t\t};\r\n\t\taddAnimation(guessTiles[i].parentElement, 'flip');\r\n\t\taddAnimation(guessTiles[i], 'idle');\r\n\t};\r\n};\r\n\r\nconst checkGuess = () => {\r\n\tif (currentGuess.dataset.guess === localStorage.getItem('solution')) {\r\n\t\tcontroller.abort();\r\n\t\tlocalStorage.clear();\r\n\t\tresult.textContent = 'You guessed the word! ðŸ¥³';\r\n\t} else if (currentGuessCount === 6) {\r\n\t\tcontroller.abort();\r\n\t\tresult.textContent = localStorage.getItem('solution');\r\n\t\tlocalStorage.clear();\r\n\t} else {\r\n\t\ttileNumber = 0;\r\n\t\tcurrentGuessCount += 1;\r\n\t\tcurrentGuess = document.querySelector(`#guess${currentGuessCount}`);\r\n\t\tguessTiles = document.querySelectorAll(`#guess${currentGuessCount} .guess__tile`);\r\n\t\tresult.textContent = '';\r\n\t};\r\n}\r\n\r\nconst addGuessToData = () => {\r\n\tcurrentGuess.dataset.guess = currentGuess.dataset.letters;\r\n}\r\n\r\nconst addGuessToStorage = () => {\r\n\tlocalStorage.setItem('guess', [localStorage.getItem('guess'), currentGuess.dataset.guess]);\r\n}\r\n\r\nconst submitGuess = () => {\r\n\tif (words.includes(currentGuess.dataset.letters)) {\r\n\t\tcheckLetters();\r\n\t\taddGuessToData();\r\n\t\taddGuessToStorage();\r\n\t\tcheckGuess();\r\n\t} else {\r\n\t\taddAnimation(currentGuess, 'shake');\r\n\t\tresult.textContent = 'isn\\'t a word';\r\n\t\tsetTimeout(() => {\r\n\t\t\taddAnimation(currentGuess, 'idle');\r\n\t\t\tresult.textContent = '';\r\n\t\t}, 600)\r\n\t}\r\n};\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n\tif (!localStorage.getItem(\"solution\")) {\r\n\t\tgetSolution();\r\n\t}\r\n\tgetWords();\r\n\taddAnimDelay();\r\n\tif (localStorage.getItem(\"guess\")?.length > 0) {\r\n\t\tfor (let i = 1; i <= localStorage.getItem(\"guess\").split(',').join('').length; i++){\r\n\t\t\ttypeLetter(localStorage.getItem(\"guess\").split(',').join('')[i-1]);\r\n\t\t\tif (i !== 0 && i % 5 === 0) {\r\n\t\t\t\tcheckLetters();\r\n\t\t\t\tcurrentGuess.dataset.guess = currentGuess.dataset.letters;\r\n\t\t\t\tcheckGuess();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n\tif (e.key.length === 1 && letterPattern.test(e.key)) {\r\n\t\ttypeLetter(e.key.toLocaleLowerCase());\r\n\t} else if (e.key === 'Backspace') {\r\n\t\teraseLetter();\r\n\t} else if (e.key === 'Enter' && tileNumber === 5 && currentGuessCount <= 6) {\r\n\t\tsubmitGuess();\r\n\t};\r\n}, { signal });\r\n\r\nfor (let i = 0; i < keyboardKeys.length; i++) {\r\n\tkeyboardKeys[i].addEventListener('click', (e) => {\r\n\t\tlet dataKey = e.currentTarget.dataset.key;\r\n\t\tif (dataKey.length === 1 && letterPattern.test(dataKey)) {\r\n\t\t\ttypeLetter(dataKey);\r\n\t\t} else if (dataKey === 'Backspace') {\r\n\t\t\teraseLetter();\r\n\t\t} else if (dataKey === 'Enter' && tileNumber === 5 && currentGuessCount <= 6) {\r\n\t\t\tsubmitGuess();\r\n\t\t};\r\n\t});\r\n}\r\n"]}